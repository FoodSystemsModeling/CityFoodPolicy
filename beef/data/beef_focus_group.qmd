---
title: "Beef Focus group - Census of Agriculture data"
format: 
  html:
    toc: true
    number-sections: true
  docx:
    toc: true
    number-sections: true
editor: visual
prefer-html: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = FALSE)
```

## Data description

### Dairy

We use the 2017 restricted access farm-level data from the Census of Agriculture. Data include operations in New York with at least 50 dairy cows.

Dairy operations are defined as operations with milk cows kept for production of milk, include dry milk cows and milk heifers that had calved (k805\>0). While some dairy operations in NY are diversified, most only produce milk. We keep all operations in the sample, even if they are diversified.

We present data by three scale categories, based on the USDA ERS Report [Consolidation in U.S. Dairy Farming](https://www.ers.usda.gov/webdocs/publications/98901/err-274.pdf?v=1435.3):

-   50-99 dairy cows
-   100 to 499 dairy cows
-   500 or more dairy cows

All data are presented grouped by these three scales and organic/non-organic for operations located in New York. Data include GCFI, total sales, dairy sales, dairy sales as a percent of total sales, and other operation characteristics.

We inflation adjust all variables expressed as dollars in 2023 dollars using the [U.S. Bureau of Labor Statistics, CPI Inflation Calculator](https://www.bls.gov/data/inflation_calculator.htm) for January 2017 to January 2023 (1.23).

```{r}

library(tidyverse)
library(readxl)
library(knitr)
library(kableExtra)
library(scales)

# Turn off scientific notation 
options(scipen = 999)

# Read in metadata and keep 2017, variable name and description only
meta <- read_csv(
  "data_processed/2024.05.14 NASS output/meta_coa.csv", 
  show_col_types = FALSE) %>% 
  filter(year == 2017) %>%
  select(variable_name, short_variable_description, variable_description) %>% 
  mutate(
    variable_description = case_when(
      is.na(short_variable_description) ~ variable_description, 
      TRUE ~ short_variable_description)) %>% 
  select(-short_variable_description)

# Read in data 
path <- "data_processed/2024.05.14 NASS output/dairy.xlsx"
sheet_names <- c("cont_all", "cont_organic", 
                 "cont_organic_scale", "cat_all", 
                 "cat_organic", "cat_organic_scale")

df <- sheet_names %>%
  map(~read_excel(path = path, 
                  sheet = .x) %>% 
        mutate(value = as.numeric(value))) %>%
  bind_rows()

# Drop unneeded data and put in correct order and rename groupbyvars
df <- df %>% 
  select(groupbyvar, groupbyvar2, groupbyvar3, 
         everything()) %>%
  rename(op_type = groupbyvar2, 
         scale = groupbyvar3) %>% 
  filter(groupbyvar == 2017 & 
           scale != "1-49 dairy cows") %>% 
  select(!groupbyvar)

# Add all into op_type
df <- df %>% 
  mutate(
    op_type = case_when(
      is.na(op_type) ~ "All operations", 
      TRUE ~ op_type))

# Convert all dollar amounts to 2023 dollars (x 1.23)
df <- df %>% 
  mutate(
    value = case_when(
      variable_name %in% c("gcfi", "tvp", "infi",
                           "fert", "seedp", "animalpurchase", 
                  "feed", "fuelo", "util", "mainr", "labor", 
                  "cwork", "otherexp", "totvarexp_alt") | 
        str_detect(variable_name, "_sales$") ~ value * 1.23, 
    TRUE ~ value))

# Change dairy cow scale to have to not - 
df <- df %>% 
  mutate(
    scale = case_when(
      scale == "50-99 dairy cows" ~ "50 to 99 dairy cows", 
      TRUE ~ scale))

# Re-level scale factor variable
df <- df %>%
  mutate(scale = factor(scale, 
                   levels = c("500 or more dairy cows", 
                              "100 to 499 dairy cows", 
                              "50 to 99 dairy cows")))
```

### Beef

We provide expenses as a cost per head by scale. We use 2017 Census of Agriculture microdata to estimate the average cost of production for livestock operations located in the Northeast (NY, PA, NJ, VT, NH, MA, CT, RI, ME) selling through local food market channels only (including direct-to-consumer and intermediated markets). In the Census of Agriculture, a farm is defined as a place from which \$1,000 or more of agricultural products were produced and sold, or normally would have been sold, during the census year. This very liberal definition of a farm captures a wide range of farms, including those that are not aspiring to be commercially viable operations. To capture only commercial operations, we drop all observations with less than \$1,000 in sales.

Our sample consists only of non-diversified non-dairy cattle operations (i.e., operations that sell one species and no crops) and selling exclusively through local food market channels (i.e., they do not sell through both local and commodity market channels). Local food market channels include both direct-to-consumer market channels (i.e., farmers market, on-farm stores or farm stands, roadside stands or stores, u-pick, CSA, and online marketplaces) and intermediated market channels (i.e., supermarkets, supercenters, restaurants, caterers, independently owned grocery stores, food cooperatives, K-12 schools, colleges or universities, hospitals, workplace cafeterias, prisons, and food banks). Farms are allowed to grow crops but have zero sales, implying that those costs accrue to feed requirements for the livestock enterprise.

To capture cost of production differences across scale, we separate our sample, based on the number of head sold in a year, into small operations (\<25th quantile), mid-size operations (25th to 75th quantile) and large operations (76th to 95th quantile). We drop observations above the 95th percentile as outliers. We also drop operations selling zero cattle weighing 500 pounds or more. As we are not interested in very small operations, we also drop small scale operations with \<2 head.

Scale: Cattle sold or moved from this operation in 2017, including calves weighing 500 pounds or more, local only

-   Mid-scale (25th to 75th quantile): 2 to 8 head
-   Large scale (76th to 95th quantile): 9 to 30 head

We attempted to export additional data on cattle operations in New York with further disaggregation among different operation types (e.g., cow-calf, feedlot, stocker/backgrounder), market channels (including nonlocal), and organic. Due to small sample sizes, the data were not approved for the public.

```{r}

# Import data 
df2 <- read_excel(
  "data_processed/2023.02.01 NASS output/12.22.22_meat_calculator_local_only_suppressed.xlsx", 
  sheet = "regions_cattle") %>% 
  filter(meat_regions == "Northeast") %>% 
  mutate(estimate = as.numeric(estimate))

# Convert all dollar amounts to 2023 dollars (x 1.23)
df2 <- df2 %>% 
  mutate(
    estimate = estimate * 1.23)

# Drop rent and lease together
df2 <- df2 %>% 
  filter(expense != "rentlease_head")

# Drop small scale 
df2 <- df2 %>% 
  filter(scale != "1 head sold")

# Add metadata manually
df2 <- df2 %>% 
  mutate(
    Variable = case_when(
      expense == "totexp" ~ "Total expense", 
      expense == "fertcseedp_head" ~ "Fertilizer, seeds, plants", 
      expense == "animalpurchase_head" ~ "Livestock", 
      expense == "feed_head" ~ "Feed", 
      expense == "fuelo_head" ~ "Gas, fuel, oil", 
      expense == "util_head" ~ "Utilities", 
      expense == "mainr_head" ~ "Repairs, maintenance", 
      expense =="labor_head" ~ "Labor", 
      expense == "rent_head" ~ "Rent",
      expense == "lease_head" ~ "Lease",
      expense == "interest_head" ~ "Interest", 
      expense == "otherexp_head" ~ "Other", 
      expense == "totexp_head" ~ "Total expense per head"))

# Rename columns 
df2 <- df2 %>% 
  rename(value = estimate, 
         variable_name = expense) 

# Keep scale 9 to 30 head only 
df2 <- df2 %>% 
  filter(scale == "9 to 30 head sold") %>% 
  select(-meat_regions)

```

\newpage

## Dairy average producer summary statistics

Compute summary statistics to show the "average producer". Data is presented for all operations, operations with organic sales, and operations with no organic sales both by scale and all operations together.

```{r}
# Select variables of interest 
var_list <- c("dairy_sales", "dairy_sales_tvp", "dairy_herd", 
              "cattle_herd", "tvp", "gcfi", "gov_payments", 
              "crop_insurance", "gov_payments_cat", 
              "fullowner", "fulltenant", "partowner", 
              "whiteonlynonhis", 
              "beginning", "young", 
              "senior", "vet")

sum <- df %>% 
  filter(variable_name %in% var_list)

# Calculate percentages for categorical variables 
sum <- sum %>% 
  mutate(
    value = case_when(
      statistic == "total" ~ value/weighted_n, 
      TRUE ~ value))

# Keep only mean values 
sum <- sum %>% 
  filter(statistic %in% c("mean", "total"))

# Add meta data and keep columns of interest 
sum <- sum %>% 
  select(!c(statistic, weighted_n)) %>%
  left_join(meta) 

# Re-order data 
sum <- sum %>% 
  mutate(
    variable_name = factor(variable_name), 
    variable_name = fct_relevel(variable_name, var_list)) 

# Make numbers look good and add (D)
sum <- sum %>% 
  mutate(
    value = case_when(
      is.na(value) ~ "(D)",
      value > 1 ~ prettyNum(value, big.mark = ",", digits = 2), 
      value <= 1 ~ percent(value, accuracy = 1.0))) 

# Summary table for organic operations by scale
sum_organic_scale <- sum %>%
  filter(!is.na(scale) & op_type == "Organic sales") %>%
  select(-op_type, -variable_name) %>%
  pivot_wider(
    names_from = scale, 
    values_from = value) %>% 
  select(variable_description, 
         `50 to 99 dairy cows`, `100 to 499 dairy cows`, 
         `500 or more dairy cows`) %>%
  rename(Variable = variable_description, 
         `50 to 99 dairy cows (n=140)` = `50 to 99 dairy cows`, 
         `100 to 499 dairy cows (n=37)` = `100 to 499 dairy cows`, 
         `500 or more dairy cows (n=5)` = `500 or more dairy cows`)

# Summary table for non-organic operations by scale
sum_noorganic_scale <- sum %>%
  filter(!is.na(scale) & op_type == "No organic sales") %>%
  select(-op_type, -variable_name) %>%
  pivot_wider(
    names_from = scale, 
    values_from = value) %>% 
  select(variable_description, 
         `50 to 99 dairy cows`, `100 to 499 dairy cows`, 
         `500 or more dairy cows`) %>%
  rename(Variable = variable_description, 
         `50 to 99 dairy cows (n=1,155)` = `50 to 99 dairy cows`, 
         `100 to 499 dairy cows (n=694)` = `100 to 499 dairy cows`, 
         `500 or more dairy cows (n=278)` = `500 or more dairy cows`)

```

\newpage

### Summary statistics - New York Organic Dairy Operations

```{r sum_organic_scale}
kable(sum_organic_scale) %>% 
  kable_styling() %>%
  footnote(general = "All dollar amounts are inflation adjusted to 2023 dollars")

```

\newpage

### Summary statistics - New York non-Organic dairy operations

```{r sum_noorganic_scale}
kable(sum_noorganic_scale) %>% 
  kable_styling() %>%
  footnote(general = "All dollar amounts are inflation adjusted to 2023 dollars")
```

\newpage

### Percent of New York Dairy Operations by Scale (dairy cows)

```{r gcfi_bar, fig.align="center", fig.width=7, fig.height=6, out.width="100%"}

## Stacked bar chart - number of cows
scale <- df %>% 
  select(op_type, scale, weighted_n) %>% 
  distinct() %>% 
  pivot_wider(
    names_from = scale, 
    values_from = weighted_n) %>% 
  mutate(
    total = rowSums(across(-op_type))) %>% 
  mutate(across(c(-op_type, -total), 
         ~.x/total)) %>% 
  select(-total) %>% 
  pivot_longer(
    cols = !op_type,
    names_to = "scale", 
    values_to = "value") %>%
  mutate(
    value = round(value, 2), 
    scale = factor(scale, 
                   levels = c("500 or more dairy cows", 
                              "100 to 499 dairy cows", 
                              "50 to 99 dairy cows")))
      
# Plot          
ggplot(scale, aes(fill = scale, 
                      x = op_type, 
                      y = value)) + 
  geom_bar(position = "stack", stat = "identity") + 
  scale_fill_manual(values = c("#B31B1B", "#9FAD9F", "#073949")) + 
  theme(legend.title = element_blank(),
        axis.title.x = element_blank()) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) + 
  labs(y = "Percent of operations") + 
  geom_text(aes(label = scales::percent(value)), 
            position = position_stack(vjust = 0.5), 
            size = 3.5, color = "white") 
  
```

## Dairy variable expenses

```{r}
rm(sum, sum_organic_scale, sum_noorganic_scale, scale)

# Select variables of interest 
var_list_total <- c("fert", "seedp", "animalpurchase", "feed", "fuelo", 
                    "chemical", "util", "mainr", "labor", "cwork", 
                    "otherexp", "totvarexp_alt")

var_list_pct <- c("fert_alt_var_pct", "seedp_alt_var_pct", 
                  "animalpurchase_alt_var_pct", 
                  "feed_alt_var_pct", "fuelo_alt_var_pct",
                  "chemical_alt_var_pct", "util_alt_var_pct", 
                  "mainr_alt_var_pct", "labor_alt_var_pct", 
                  "cwork_alt_var_pct", "otherexp_alt_var_pct")

sum <- df %>% 
  filter(variable_name %in% var_list_total)

# Keep only mean/se values 
sum <- sum %>% 
  filter(statistic != "median")

# Make numbers look good, add (D), add () around se
sum <- sum %>% 
  mutate(
    value = case_when(
      is.na(value) ~ "(D)",
      TRUE ~ prettyNum(value, big.mark = ",", digits = 2)), 
    value = case_when(
      statistic == "se" ~ str_c("(", value, ")"), 
      TRUE ~ value))
  
# Add meta data and keep columns of interest 
sum <- sum %>% 
  select(!c(weighted_n)) %>%
  left_join(meta) 

# Get se under mean for each variable
sum <- sum %>% 
  arrange(variable_name, op_type, scale)

# Summary table for organic operations by scale
sum_organic_scale <- sum %>%
  filter(op_type == "Organic sales") %>%
  select(-op_type, -variable_name) %>%
  pivot_wider(
    names_from = scale, 
    values_from = value) %>% 
  select(variable_description, 
         `50 to 99 dairy cows`, `100 to 499 dairy cows`, 
         `500 or more dairy cows`) %>%
  rename(Variable = variable_description, 
         `50 to 99 dairy cows (n=140)` = `50 to 99 dairy cows`, 
         `100 to 499 dairy cows (n=37)` = `100 to 499 dairy cows`, 
         `500 or more dairy cows (n=5)` = `500 or more dairy cows`) %>% 
  arrange(if_else(Variable == "Total variable expense", 1, 0)) %>%
  mutate(
    Variable = case_when(
      row_number() %% 2==0 ~ "", 
      TRUE ~Variable))

# Summary table for non-organic operations by scale
sum_noorganic_scale <- sum %>%
  filter(op_type == "No organic sales") %>%
  select(-op_type, -variable_name) %>%
  pivot_wider(
    names_from = scale, 
    values_from = value) %>% 
  select(variable_description, 
         `50 to 99 dairy cows`, `100 to 499 dairy cows`, 
         `500 or more dairy cows`) %>%
  rename(Variable = variable_description, 
         `50 to 99 dairy cows (n=140)` = `50 to 99 dairy cows`, 
         `100 to 499 dairy cows (n=37)` = `100 to 499 dairy cows`, 
         `500 or more dairy cows (n=5)` = `500 or more dairy cows`) %>% 
  arrange(if_else(Variable == "Total variable expense", 1, 0)) %>%
  mutate(
    Variable = case_when(
      row_number() %% 2==0 ~ "", 
      TRUE ~Variable)) 

### Get expenses as a percent of total variable expense by organic/not and scale
sum <- df %>% 
  filter(variable_name %in% var_list_pct)

# Keep only mean values 
sum <- sum %>% 
  filter(statistic == "mean")

# Add meta data and keep columns of interest 
sum <- sum %>% 
  left_join(meta) %>% 
  select(!c(weighted_n, statistic, variable_name))

# Define organic and not, add sample sizes and put in correct order  
sum_organic_pct <- sum %>% 
  filter(op_type == "Organic sales") %>% 
  mutate(
    scale = case_when(
      scale == "50 to 99 dairy cows" ~ "50 to 99 dairy cows\n(140)", 
      scale == "100 to 499 dairy cows" ~ "100 to 499 dairy cows\n (37)", 
      scale == "500 or more dairy cows" ~ "500 or more dairy cows\n(5)"),
    scale = factor(scale, 
                 levels = c("50 to 99 dairy cows\n(140)", 
                            "100 to 499 dairy cows\n (37)", 
                            "500 or more dairy cows\n(5)")))

sum_noorganic_pct <- sum %>% 
  filter(op_type == "No organic sales") %>% 
  mutate(
    scale = case_when(
      scale == "50 to 99 dairy cows" ~ "50 to 99 dairy cows\n(1155)", 
      scale == "100 to 499 dairy cows" ~ "100 to 499 dairy cows\n (694)", 
      scale == "500 or more dairy cows" ~ "500 or more dairy cows\n(278)"), 
    scale = factor(scale, 
                 levels = c("50 to 99 dairy cows\n(1155)", 
                            "100 to 499 dairy cows\n (694)", 
                            "500 or more dairy cows\n(278)")))
```

### Variable expenses - New York Organic Dairy Operations

```{r var_organic_scale}
kable(sum_organic_scale) %>% 
  kable_styling() %>%
  footnote(general = "All dollar amounts are inflation adjusted to 2023 dollars")
```

\newpage

### Variable expenses - New York Non-Organic Dairy Operations

```{r var_noorganic_scale}
kable(sum_noorganic_scale) %>% 
  kable_styling() %>%
  footnote(general = "All dollar amounts are inflation adjusted to 2023 dollars")
```

\newpage

### Average Variable Expenses for New York Organic Dairy Producers as a Percent of Total Variable Expense

```{r expense_organic_stacked_bar, fig.align="center", fig.width=7, fig.height=6, out.width="100%"}

# Organic plot
ggplot(sum_organic_pct, 
       aes(fill = variable_description, 
           x = scale, 
           y = value)) + 
  geom_bar(position = "stack", stat = "identity") + 
  scale_fill_manual(values = c("#B31B1B", "#9FAD9F", "#A2998B", "#073949",
                               "#D47500", "#EF4035", "#F8981D", "#6EB43F", 
                               "#006699", "#222222", "#4B7B2B")) +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank()) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) + 
  labs(y = "Percent of total variable expense") +
  geom_text(aes(label = label_percent(accuracy = 1)(value)), 
            position = position_stack(vjust = 0.5), 
            size = 3.5, color = "white") + 
  labs(caption = "Notes: Expenses not included due to disclosure issues include livestock and \ncustomwork for organic operations with 500 dairy cows or more.")

```

\newpage

### Average Variable Expenses for New York Non-Organic Dairy Producers as a Percent of Total Variable Expense

```{r expense_noorganic_stacked_bar, fig.align="center", fig.width=7, fig.height=6, out.width="100%"}

# No Organic plot
ggplot(sum_noorganic_pct, 
       aes(fill = variable_description, 
           x = scale, 
           y = value)) + 
  geom_bar(position = "stack", stat = "identity") + 
  scale_fill_manual(values = c("#B31B1B", "#9FAD9F", "#A2998B", "#073949",
                               "#D47500", "#EF4035", "#F8981D", "#6EB43F", 
                               "#006699", "#222222", "#4B7B2B")) +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank()) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) + 
  labs(y = "Percent of total variable expense") +
  geom_text(aes(label = label_percent(accuracy = 1)(value)), 
            position = position_stack(vjust = 0.5), 
            size = 3.5, color = "white") 

```

\newpage

## Beef variable expenses

```{r}
# Drop median
sum <- df2 %>% 
  filter(statistic != "median")

# Make numbers look good, add (D), add () around se and drop unneded columns
sum <- sum %>% 
  select(!c(n)) %>%
  mutate(
    value = case_when(
      is.na(value) ~ "(D)",
      TRUE ~ prettyNum(value, big.mark = ",", digits = 2)), 
    value = case_when(
      statistic == "se" ~ str_c("(", value, ")"), 
      TRUE ~ value))

# Get se under mean for each variable
sum <- sum %>% 
  arrange(variable_name)

# Summary table by scale
sum_beef_scale <- sum %>%
  select(-variable_name) %>%
  pivot_wider(
    names_from = scale, 
    values_from = value) %>% 
  select(-statistic) %>%
  rename(`9 to 30 head sold (n=80)` = `9 to 30 head sold`) %>% 
  arrange(if_else(Variable == "Total expense per head", 1, 0)) %>%
  arrange(if_else(Variable == "Total expense", 1, 0)) %>%
  mutate(
    Variable = case_when(
      row_number() %% 2==0 ~ "", 
      TRUE ~Variable))

```

### Average variable production expenses - Local Beef Operations in the Northest

```{r var_beef_scale}
kable(sum_beef_scale) %>% 
  kable_styling() %>%
  footnote(general = "Mean (standard error)")

```

\newpage

### Average Production Expenses Per Head for Local Beef Producers in the Northeast

```{r expense_beef_bar, fig.align="center", fig.width=7, fig.height=6, out.width="100%"}

# Drop median and make separate column for mean and se
sum_beef <- df2 %>% 
  filter(statistic != "median") %>% 
  select(-n, -variable_name) %>% 
  pivot_wider(
    names_from = statistic, 
    values_from = value)

# Remove total (makes scale too hard to see)
sum_beef <- sum_beef %>% 
  filter(!str_detect(Variable, "Total"))

# Add sample sizes 
sum_beef <- sum_beef %>% 
  mutate(
    scale = case_when(
      scale == "2 to 8 head sold" ~ "2 to 8 head sold (n=264)", 
      scale == "9 to 30 head sold" ~ "9 to 30 head sold (n=80)"))

# Horizontal barplot
ggplot(sum_beef, aes(x = mean, 
                      y = Variable, 
                      fill = scale)) + 
  geom_bar(stat = "identity", 
           position = position_dodge(0.7),
           width = 0.7) + 
  geom_errorbar(aes(x= se, 
                    xmin = mean - se, 
                    xmax = mean + se),
                position = position_dodge(0.7), 
                width = 0.2, color = "grey40") + 
  scale_fill_manual(values = c("#B31B1B", "#9FAD9F", "#A2998B", "#073949")) + 
  scale_x_continuous(labels = dollar_format(accuracy = 1)) + 
  labs(x = "Expense", 
       y = "", 
       caption = "Notes: Bars indicate average production expense and error bars \nindicate the variability of expenses. All expenses are in 2023 dollars.") +   
  theme(legend.title = element_blank(), 
        plot.caption = element_text(hjust = 0)) 

```

\newpage

### Average Production Expenses per head for Local Beef Producers in the Northeast as a Percent of Total Expense per head

```{r expense_beef_stacked_bar, fig.align="center", fig.width=7, fig.height=6, out.width="100%"}

# Calculate each expense as a percent of total per head
sum_beef_pct <- df2 %>% 
  filter(statistic == "mean") %>% 
  select(!c(variable_name, statistic, n)) %>% 
  pivot_wider(
    names_from = Variable, 
    values_from = value) %>% 
  select(!`Total expense`) %>% 
  mutate(across(`Fertilizer, seeds, plants`:Other,
                ~ . /`Total expense per head`)) %>%
  select(!`Total expense per head`) %>%
  pivot_longer(
    cols = !scale, 
    names_to = "Variable", 
    values_to = "value")
  
# Add sample sizes 
sum_beef_pct <- sum_beef_pct %>% 
  mutate(
    scale = case_when(
      scale == "2 to 8 head sold" ~ "2 to 8 head sold \n(n=264)", 
      scale == "9 to 30 head sold" ~ "9 to 30 head sold \n(n=80)"))

# Plot
ggplot(sum_beef_pct, 
       aes(fill = Variable, 
           x = scale, 
           y = value)) + 
  geom_bar(position = "stack", stat = "identity") + 
  scale_fill_manual(values = c("#B31B1B", "#9FAD9F", "#A2998B", "#073949",
                               "#D47500", "#EF4035", "#F8981D", "#6EB43F", 
                               "#006699", "#222222", "#4B7B2B")) +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank()) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) + 
  labs(y = "Percent of total expense per head") +
  geom_text(aes(label = label_percent(accuracy = 1)(value)), 
            position = position_stack(vjust = 0.5), 
            size = 3.5, color = "white") 

```

\newpage

## Dairy profitability

We present data on return on assets, net farm income, and operating profit margin.

-   Return on assets (ROA) = (gross cash farm income - total expenditures + interest expense)/total assets

-   Operating profit margin (OPM) = (gross cash farm income - total expenditures + interest expense)/gross cash farm income

-   Net farm income (NFI) = gross cash farm income - total expenditures

-   Gross cash farm income = total sales + contract income + government payments + income from ag related sources - landlord's share of total sales

-   Total assets = all land and buildings owned + all land and buildings leased from others + current value of machinery and equipment - land and buildings leased to others

-   Total expenditures = sum of contractor total production expense + operator and landlord total production expenses

```{r}
rm(sum_noorganic_pct, sum_noorganic_scale, sum_organic_pct, sum_organic_scale)

# Select variables of interest 
var_list <- c("roa", "infi", "opm")

sum <- df %>% 
  filter(variable_name %in% var_list)

# Keep only mean values and subgroups of interest
sum <- sum %>% 
  filter(statistic == "mean")

# Add meta data and keep columns of interest 
sum <- sum %>% 
  left_join(meta) %>%
  select(!c(statistic, weighted_n, variable_name))

# Summary table by scale
sum <- sum %>% 
  pivot_wider(
    names_from = scale, 
    values_from = value) %>%
  select(
    op_type, variable_description,
    `50 to 99 dairy cows`, `100 to 499 dairy cows`, 
    `500 or more dairy cows`) %>%
  mutate(across(c(`50 to 99 dairy cows`:`500 or more dairy cows`),
               ~case_when(
                  is.na(.) ~ "(D)",
                  . > 1 ~ prettyNum(., big.mark = ",", digits = 2), 
                  . <= 1 ~ percent(., accuracy = 1.0)))) %>% 
  rename(Variable = variable_description)

# Create tables for organic and not
sum_organic <- sum %>% 
  filter(op_type == "Organic sales") %>% 
  select(-op_type) %>% 
  rename(
    `50 to 99 dairy cows (140)` = `50 to 99 dairy cows`, 
    `100 to 499 dairy cows (37)` = `100 to 499 dairy cows`, 
    `500 or more dairy cows (5)` = `500 or more dairy cows`)
  
sum_noorganic <- sum %>% 
  filter(op_type == "No organic sales") %>% 
  select(-op_type) %>% 
  rename(
    `50 to 99 dairy cows (1,155)` = `50 to 99 dairy cows`,
    `100 to 499 dairy cows (694)` = `100 to 499 dairy cows`, 
    `500 or more dairy cows (278)` = `500 or more dairy cows`)

```

\newpage

### Profitability - New York Organic Dairy Operations

```{r profitability_organic}
kable(sum_organic) %>% 
  kable_styling() 

```

\newpage

### Profitability - New York Non-Organic Dairy Operations

```{r profitability_noorganic}
kable(sum_noorganic) %>% 
  kable_styling() 

```
